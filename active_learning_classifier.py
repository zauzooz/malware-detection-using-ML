""" Implement Active Learning Algorithm"""
import random
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression


class ActiveLearningAlgorithm:
    """Class Active Learning Algorithm"""

    def __init__(
        self, learning_rate=10, regularization_parameter=0.5, smoothing_parameter=0.6
    ):
        self.learning_rate = learning_rate
        self.regularization_parameter = regularization_parameter
        self.smoothing_parameter = smoothing_parameter
        self.linear_regression = LinearRegression()

    def fit(self, X, y):
        """Fit method for active learning algorithm"""
        self.linear_regression.fit(X=X, y=y)

    def predict(self, X):
        """Predict method for active learning algorithm"""
        X = X.to_numpy()
        Y_pre = []
        Ypre = 0
        Zt = 0
        for x in X:
            pre = self.linear_regression.predict(x.reshape(1, -1))
            if pre > 0:
                Ypre = 1
            else:
                Ypre = -1

            r = 1 / self.regularization_parameter
            v = 1 / pre
            c = 0.5 * ((-1 * self.learning_rate / r) + v)
            p = abs(pre) + c
            if p > 0:
                sm = self.smoothing_parameter / (self.smoothing_parameter + p)
                if random.random() < sm:
                    Zt = True
            else:
                Zt = False
            if Zt:
                Y_pre.append(Ypre)
        return Y_pre


# if __name__ == "__main__":
#     n = 1000  # number of samples
#     m = 100  # number of features
#     X = pd.DataFrame(np.random.randint(0, 2, size=(n, m))) # create data
#     y = np.random.randint(0, 2, size=n) # create label
#     (
#         X_train,
#         X_test,
#         y_train,
#         y_test,
#     ) = train_test_split(  # split data to train and test
#         X, y, test_size=0.3, random_state=42
#     )
#     active_learning = ActiveLearningAlgorithm() # create model
#     active_learning.fit(X_train, y_train) # fit model

#     Y_pre = active_learning.predict(X_test) # predict label for test data
#     print(Y_pre)
