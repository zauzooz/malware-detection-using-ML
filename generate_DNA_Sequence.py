import pandas as pd
import numpy as np


def kMerFrequence(df, k=2):
    datalist = df.values.tolist()
    dna=[]
    for lst in datalist:
        str_num = ''.join(map(str,lst))
        dna.append(str_num)
    seq = 'ACGT'
    dict_1mer={}
    list_1mer=[]
    dict_2mer={}
    list_2mer=[]
    dict_3mer={}
    list_3mer=[]
    dict_4mer={}
    list_4mer=[]
    
    for base1 in seq:
        dict_1mer[base1]=0
        for base2 in seq:
            key2 = base1 + base2
            dict_2mer[key2] = 0
            for base3 in seq:
                key3 = base1 + base2 + base3
                dict_3mer[key3] = 0
                for base4 in seq:
                    key4 = base1 + base2 + base3+ base4
                    dict_4mer[key4] = 0   
    try:
        if k== 1:
            for s in dna :
                for key in dict_1mer:
                    dict_1mer[key] = s.count(key)
                list_1mer.append(list(dict_1mer.values()))
            dataframe= pd.DataFrame(list_1mer,columns=dict_1mer.keys())
            return dataframe*0.1
        elif k==2:
            for s in dna :
                for key in dict_2mer:
                    dict_2mer[key] = s.count(key)
                list_2mer.append(list(dict_2mer.values()))
            dataframe= pd.DataFrame(list_2mer,columns=dict_2mer.keys())
            return dataframe*0.1
        elif k==3:
            for s in dna :
                for key in dict_3mer:
                    dict_3mer[key] = s.count(key)
                list_3mer.append(list(dict_3mer.values()))
            dataframe= pd.DataFrame(list_3mer,columns=dict_3mer.keys())
            return dataframe*0.1
        elif k==4:
            for s in dna :
                for key in dict_4mer:
                    dict_4mer[key] = s.count(key)
                list_4mer.append(list(dict_4mer.values()))
            dataframe= pd.DataFrame(list_4mer,columns=dict_4mer.keys())
            return dataframe*0.1
        else :
            raise ValueError("Error value")
    except ValueError as error:
        return error
def dnaSequenceDesign(df):
    datalist = df.values.tolist()
    binarySample=[]
    for list in datalist:
        str_num = ''.join(map(str,list))
        binarySample.append(str_num)
    dnaAllSample=[]
    for binary in binarySample:
        dna=''
        for i in range (0, len(binary),1 ):
            bits= binary[i:i+2]
            if(bits=='00'):
                dna+= 'A'
            elif(bits=='01'):
                dna+='C'
            elif(bits=='10'):
                dna+='G'
            elif(bits=='11'):
                dna+='T'
        dnaAllSample.append(dna)
    dataframe= pd.DataFrame(dnaAllSample)
    return dataframe
def Tm_Constraint(df):
    datalist = df.values.tolist()
    dna=[]
    for list in datalist:
        strDNA = ''.join(map(str,list))
        dna.append(strDNA)
    Tm_list=[]
    for s in dna:
        pair_GC= s.count('GC') if s.count('GC')>s.count('CG') else s.count('CG')
        pair_AT= s.count('AT') if s.count('AT')>s.count('TA') else s.count('TA')
        Tm = pair_GC*4 + pair_AT*2
        Tm_list.append(Tm)
    dataframe = pd.DataFrame(Tm_list,columns=['Tm'])
    return dataframe
def GCC_Constraint(df):
    datalist = df.values.tolist()
    dna=[]
    for list in datalist:
        strDNA = ''.join(map(str,list))
        dna.append(strDNA)
    GCC_list =[]
    for s in dna:
       G=s.count('G')
       C= s.count('C')
       GCC=round(((G+C)/len(s))*100)
       GCC_list.append(GCC)
    dataframe = pd.DataFrame(GCC_list,columns=['GCC'])
    return dataframe
def AT_GC_Ratio_Constraint(df):
    datalist = df.values.tolist()
    dna=[]
    for list in datalist:
        strDNA = ''.join(map(str,list))
        dna.append(strDNA)
    AT_GC_list =[]
    for s in dna:
        G=s.count('G')
        C= s.count('C')
        A=s.count('A')
        T= s.count('T')
        AT_GC=round((A+T)/(G+C),2)
        AT_GC_list.append(AT_GC)
    dataframe = pd.DataFrame(AT_GC_list,columns=['AT_GC Ratio'])
    return dataframe          
def generateDNASequence(df):
    pass
if __name__=="__main__":
    n = 10 # sample 
    m = 20 # feature
    X = pd.DataFrame(np.random.randint(0, 2, size = (n, m))) # dataframe
    y = np.random.randint(0, 2, size=n) # label of sample
    dna = dnaSequenceDesign(X)
    kmer = kMerFrequence(dna, k=2)
    print(kmer)
    
    
    
    
